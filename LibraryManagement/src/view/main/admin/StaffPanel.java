/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.main.admin;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.database.Connect;
import model.database.Staff;
import swing.UIController;
import utilities.File;
import view.main.librarian.ReaderPanel;
import static view.main.librarian.ReaderPanel.hash;

/**
 *
 * @author Admin
 */
public class StaffPanel extends javax.swing.JPanel {

    DefaultTableModel dtm;

    public enum Mode {
        ADD,
        MODIFY,
        FREE
    }
    Mode mode;

    /**
     * Creates new form StaffPanel
     */
    public StaffPanel() {
        initComponents();
        getStaff();
        loadAddress();
        loadRole();
        UIController.setDefaultTableHeader(jTable_Staff);
        setEditableForAll(false);
    }

    void loadAddress() {
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select province_name from province");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                jComboBox_Province.addItem(rs.getString(1));
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy địa chỉ");
        }
    }

    void loadRole() {
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select role from role where role.role_id != 1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                jComboBox_Role.addItem(rs.getString(1));
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy role!!");
        }
    }

    // get nhân viên (trừ độc giả) có status == 1(chưa xóa).
    void getStaff() {
        dtm = (DefaultTableModel) jTable_Staff.getModel();
        dtm.setNumRows(0);
        Connection ketNoi = Connect.GetConnect();
        Vector vt;
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select a.username,a.Full_Name,role.role,a.gender,a.date_of_birth,address.specific_address + ' - ' + ward.ward_name  + ' - ' + district.district_name + ' - ' + province.province_name as diachi,a.phone_number,a.email,a.registered_date from account a\n"
                    + "  inner join address\n"
                    + "  on address.address_id = a.address_id\n"
                    + "  left join ward\n"
                    + "  on address.ward_id = ward.ward_id\n"
                    + "  left join district\n"
                    + "  on ward.district_id = district.district_id\n"
                    + "  left join province\n"
                    + "  on district.province_id = province.province_id\n"
                    + "	left join role\n"
                    + " on role.role_id = a.role_id where role.role_id != 1 and a.status = 1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                vt = new Vector();
                vt.add(rs.getString(1));
                vt.add(rs.getString(2));
                vt.add(rs.getString(3));
                vt.add(rs.getString(4));
                vt.add(rs.getDate(5));
                vt.add(rs.getString(6));
                vt.add(rs.getString(7));
                vt.add(rs.getString(8));
                vt.add(rs.getDate(9));
                dtm.addRow(vt);
            }
            jTable_Staff.setModel(dtm);
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("loi lay user");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField_ID = new javax.swing.JTextField();
        jRadioButton_Male = new javax.swing.JRadioButton();
        jRadioButton_Female = new javax.swing.JRadioButton();
        jRadioButton_Other = new javax.swing.JRadioButton();
        jTextField_PhoneNumber = new javax.swing.JTextField();
        jTextField_Name = new javax.swing.JTextField();
        jTextField_Email = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox_Province = new javax.swing.JComboBox<>();
        jComboBox_District = new javax.swing.JComboBox<>();
        jComboBox_Commune = new javax.swing.JComboBox<>();
        jDateChooser_DateOfBirth = new com.toedter.calendar.JDateChooser();
        jComboBox_Role = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jTextField_Address = new javax.swing.JTextField();
        jPanel_Card = new javax.swing.JPanel();
        jPanel_Card1 = new javax.swing.JPanel();
        jButton_Add = new javax.swing.JButton();
        jButton_Modify = new javax.swing.JButton();
        jButton_Remove = new javax.swing.JButton();
        jPanel_Card2 = new javax.swing.JPanel();
        jButton_OK = new javax.swing.JButton();
        jButton_Cancel = new javax.swing.JButton();
        jButton_Clear = new javax.swing.JButton();
        jButton_ClearSearch = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jTextField_NameSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Staff = new javax.swing.JTable();
        jButton_ExportExcel = new javax.swing.JButton();
        jButton_ImportExcel = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Staff information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 14), new java.awt.Color(153, 153, 153))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel3.setText("Gender");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel7.setText("Phone number");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel8.setText("Email");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel10.setText("Address");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel11.setText("Province");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel12.setText("District");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel13.setText("Commune");

        jTextField_ID.setEditable(false);
        jTextField_ID.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jRadioButton_Male.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton_Male);
        jRadioButton_Male.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jRadioButton_Male.setSelected(true);
        jRadioButton_Male.setText("Male");

        jRadioButton_Female.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton_Female);
        jRadioButton_Female.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jRadioButton_Female.setText("Female");

        jRadioButton_Other.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton_Other);
        jRadioButton_Other.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jRadioButton_Other.setText("Other");

        jTextField_PhoneNumber.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jTextField_Name.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jTextField_Email.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel4.setText("Date of birth");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel15.setText("Role");

        jComboBox_Province.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jComboBox_Province.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ProvinceActionPerformed(evt);
            }
        });

        jComboBox_District.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jComboBox_District.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_DistrictActionPerformed(evt);
            }
        });

        jComboBox_Commune.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jDateChooser_DateOfBirth.setDateFormatString("yyyy-MM-dd");
        jDateChooser_DateOfBirth.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jComboBox_Role.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jComboBox_Role.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_RoleActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel16.setText("Address");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jRadioButton_Male)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButton_Female)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButton_Other)
                                        .addGap(57, 57, 57))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jDateChooser_DateOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jTextField_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_Email, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jTextField_PhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jTextField_Name, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_Address)))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel15)
                        .addComponent(jLabel13)
                        .addComponent(jLabel12)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jComboBox_Commune, 0, 160, Short.MAX_VALUE)
                        .addComponent(jComboBox_District, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox_Role, 0, 160, Short.MAX_VALUE))
                    .addComponent(jComboBox_Province, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(177, 177, 177))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel11)
                        .addComponent(jLabel2)
                        .addComponent(jTextField_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(jComboBox_Province, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField_ID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jRadioButton_Male)
                            .addComponent(jRadioButton_Female)
                            .addComponent(jRadioButton_Other)
                            .addComponent(jLabel7)
                            .addComponent(jTextField_PhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextField_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jDateChooser_DateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jComboBox_District, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jComboBox_Commune, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(jComboBox_Role, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(jTextField_Address, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel_Card.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Card.setLayout(new java.awt.CardLayout());

        jPanel_Card1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Card1.setMaximumSize(new java.awt.Dimension(30000, 33));
        jPanel_Card1.setPreferredSize(new java.awt.Dimension(439, 30));
        jPanel_Card1.setLayout(new java.awt.GridLayout(1, 0, 35, 0));

        jButton_Add.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Add.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add30px.png"))); // NOI18N
        jButton_Add.setText("Add");
        jButton_Add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Add.setMaximumSize(new java.awt.Dimension(95, 30));
        jButton_Add.setMinimumSize(new java.awt.Dimension(95, 30));
        jButton_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddActionPerformed(evt);
            }
        });
        jPanel_Card1.add(jButton_Add);

        jButton_Modify.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Modify.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Modify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        jButton_Modify.setText("Modify");
        jButton_Modify.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Modify.setEnabled(false);
        jButton_Modify.setMaximumSize(new java.awt.Dimension(95, 33));
        jButton_Modify.setMinimumSize(new java.awt.Dimension(95, 30));
        jButton_Modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ModifyActionPerformed(evt);
            }
        });
        jPanel_Card1.add(jButton_Modify);

        jButton_Remove.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Remove.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash.png"))); // NOI18N
        jButton_Remove.setText("Remove");
        jButton_Remove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Remove.setEnabled(false);
        jButton_Remove.setMaximumSize(new java.awt.Dimension(123, 35));
        jButton_Remove.setMinimumSize(new java.awt.Dimension(95, 30));
        jButton_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveActionPerformed(evt);
            }
        });
        jPanel_Card1.add(jButton_Remove);

        jPanel_Card.add(jPanel_Card1, "cardFirst");

        jPanel_Card2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Card2.setLayout(new java.awt.GridLayout(1, 0, 35, 0));

        jButton_OK.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_OK.setForeground(new java.awt.Color(51, 51, 51));
        jButton_OK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add30px.png"))); // NOI18N
        jButton_OK.setText("OK");
        jButton_OK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OKActionPerformed(evt);
            }
        });
        jPanel_Card2.add(jButton_OK);

        jButton_Cancel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Cancel.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancel20px.png"))); // NOI18N
        jButton_Cancel.setText("Cancel");
        jButton_Cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelActionPerformed(evt);
            }
        });
        jPanel_Card2.add(jButton_Cancel);

        jButton_Clear.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Clear.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clear.png"))); // NOI18N
        jButton_Clear.setText("Clear");
        jButton_Clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ClearActionPerformed(evt);
            }
        });
        jPanel_Card2.add(jButton_Clear);

        jPanel_Card.add(jPanel_Card2, "cardSecond");

        jButton_ClearSearch.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_ClearSearch.setForeground(new java.awt.Color(51, 51, 51));
        jButton_ClearSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clear.png"))); // NOI18N
        jButton_ClearSearch.setText("Clear");
        jButton_ClearSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_ClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ClearSearchActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel14.setText("Name");

        jTextField_NameSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jTextField_NameSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField_NameSearchCaretUpdate(evt);
            }
        });

        jTable_Staff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Role", "Gender", "Date of birth", "Adress", "Phone number", "Email", "Registered"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Staff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_StaffMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Staff);

        jButton_ExportExcel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_ExportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/excel.png"))); // NOI18N
        jButton_ExportExcel.setText("Export");
        jButton_ExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExportExcelActionPerformed(evt);
            }
        });

        jButton_ImportExcel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_ImportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/excel.png"))); // NOI18N
        jButton_ImportExcel.setText("Import");
        jButton_ImportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ImportExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_NameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_ClearSearch)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_ImportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_ExportExcel)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel_Card, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jTextField_NameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel_Card, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton_ExportExcel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton_ImportExcel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton_ClearSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(28, 28, 28)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void clearAll() {
        jRadioButton_Male.setSelected(true);
        jDateChooser_DateOfBirth.setDate(null);
        jTextField_Name.setText("");
        jTextField_PhoneNumber.setText("");
        jTextField_Email.setText("");
        jTextField_ID.setText("");
        jComboBox_Province.setSelectedIndex(0);
        jComboBox_District.setSelectedIndex(0);
        jComboBox_Commune.setSelectedIndex(0);
        jComboBox_Role.setSelectedIndex(0);
    }

    public void setEditableForAll(boolean editable) {
        jDateChooser_DateOfBirth.setEnabled(editable);
        jTextField_Name.setEditable(editable);
        jTextField_PhoneNumber.setEditable(editable);
        jTextField_Email.setEditable(editable);
        jComboBox_Province.setEnabled(editable);
        jComboBox_District.setEnabled(editable);
        jComboBox_Commune.setEnabled(editable);
        jComboBox_Role.setEnabled(editable);
    }

    private boolean checkinput() {
        String id = jTextField_ID.getText();
        String sqlId = "select * from account where username = '" + id + "'";
        String sqlEmail = "select * from account where email = '" + jTextField_Email.getText() + "'";
        String sqlPhone = "select * from account where phone_number = '" + jTextField_PhoneNumber.getText() + "'";
        if ("".equals(id)) {
            JOptionPane.showMessageDialog(this, "Mã nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_ID.requestFocusInWindow();
            return false;
        }
        else if (checkExist(sqlId) != 0) {
            JOptionPane.showMessageDialog(this, "Mã nhân viên đã tồn tại!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_ID.requestFocusInWindow();
            return false;
        }
        else if ("".equals(jTextField_Name.getText())) {
            JOptionPane.showMessageDialog(this, "Tên nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_Name.requestFocusInWindow();
            return false;
        }
        else if ("".equals(jTextField_PhoneNumber.getText())) {
            JOptionPane.showMessageDialog(this, "SĐT nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_PhoneNumber.requestFocusInWindow();
            return false;
        }
        else if (!jTextField_PhoneNumber.getText().matches("0[0-9]{9}")) {
            JOptionPane.showMessageDialog(this, "SĐT nhân viên nhập chưa đúng định dạng!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_PhoneNumber.requestFocusInWindow();
            return false;
        }
        else if (checkExist(sqlPhone) != 0) {
            JOptionPane.showMessageDialog(this, "SĐT nhân viên đã được sử dụng!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_ID.requestFocusInWindow();
            return false;
        }
        else if ("".equals(jTextField_Email.getText())) {
            JOptionPane.showMessageDialog(this, "Email nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_Email.requestFocusInWindow();
            return false;
        }
        else if (!jTextField_Email.getText().matches("^[a-zA-Z][\\w]+@([\\w]+\\.[\\w]+|[\\w]+\\.[\\w]{2,}\\.[\\w]{2,})$")) {
            JOptionPane.showMessageDialog(this, "Email nhân viên nhập chưa đúng định dạng!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_Email.requestFocusInWindow();
            return false;
        }
        else if (checkExist(sqlEmail) != 0) {
            JOptionPane.showMessageDialog(this, "Email nhân viên đã được sử dụng!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_ID.requestFocusInWindow();
            return false;
        }
        else if ("".equals(jTextField_Address.getText())) {
            JOptionPane.showMessageDialog(this, "Adress nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_Address.requestFocusInWindow();
            return false;
        } 
        else {
            return true;
        }
    }

    public int checkExist(String sql) {
        Connection ketNoi = Connect.GetConnect();
        int tonTai = 0;
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tonTai = 1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(StaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tonTai;
    }

    private void jButton_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OKActionPerformed
        // TODO add your handling code here:
        String username = jTextField_ID.getText();
        String Full_Name = jTextField_Name.getText();
        String genderEndlish = getSelectedButtonText(buttonGroup1);
        String gender = "";
        if (genderEndlish.equalsIgnoreCase("Male")) {
            gender = "Nam";
        } else if (genderEndlish.equalsIgnoreCase("Female")) {
            gender = "Nữ";
        } else {
            gender = "Khác";
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String date_of_birth = sdf.format(jDateChooser_DateOfBirth.getDate());
        String specific_address = jTextField_Address.getText();
        String email = jTextField_Email.getText();
        String phone_number = jTextField_PhoneNumber.getText();
        int ward_id = getIdWard(jComboBox_Commune.getSelectedItem().toString(), jComboBox_District.getSelectedItem().toString(), jComboBox_Province.getSelectedItem().toString());
        String registeredDate = java.time.LocalDate.now().toString();
        if (checkinput() == true) {
            if (mode == Mode.ADD) {
                int address_id = getAddress_idBySpecific_address(ward_id, specific_address);
                if (address_id == -1) {
                    insertNewAddress(ward_id, specific_address);
                    address_id = getAddress_idBySpecific_address(ward_id, specific_address);
                }
                String role = jComboBox_Role.getSelectedItem().toString();
                int roleId = getIdRole(role);
                Staff s1 = new Staff(username, hash(username), Full_Name, gender, date_of_birth, registeredDate, address_id, phone_number, email, roleId, 1);
                boolean flag = insertAccount(s1);
                if (flag != false) {
                    JOptionPane.showMessageDialog(this, "Thêm nhân viên mới thành công!!!", "", JOptionPane.CLOSED_OPTION);
                    getStaff();
                } else {
                    JOptionPane.showMessageDialog(this, "Thêm nhân viên mới thất bại!!!", "", JOptionPane.ERROR);
                }

            } else if (mode == Mode.MODIFY) {
                int address_id = getAddress_idBySpecific_address(ward_id, specific_address);
                if (address_id == -1) {
                    insertNewAddress(ward_id, specific_address);
                    address_id = getAddress_idBySpecific_address(ward_id, specific_address);
                }
                String role = jComboBox_Role.getSelectedItem().toString();
                int roleId = getIdRole(role);
                Staff s2 = new Staff(username, Full_Name, gender, date_of_birth, address_id, phone_number, email, roleId);
                boolean flag = updateAccount(s2);
                if (flag != false) {
                    JOptionPane.showMessageDialog(null, "Sửa thông tin nhân viên mới thành công!!!", "", JOptionPane.OK_OPTION);
                    getStaff();
                } else {
                    JOptionPane.showMessageDialog(null, "Sửa thông tin nhân viên mới thất bại!!!", "", JOptionPane.ERROR);
                }

            }
        }
        //UIController.showCardLayout("cardFirst", jPanel_Card);
    }//GEN-LAST:event_jButton_OKActionPerformed

    private void jButton_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelActionPerformed
        // TODO add your handling code here:
        mode = Mode.FREE;
        clearAll();
        setEditableForAll(false);
        if (jTable_Staff.getSelectedRow() != -1) {
        } else {
            jButton_Modify.setEnabled(false);
            jButton_Remove.setEnabled(false);
        }
        UIController.showCardLayout("cardFirst", jPanel_Card);
    }//GEN-LAST:event_jButton_CancelActionPerformed

    private void jButton_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ClearActionPerformed
        // TODO add your handling code here:
        clearAll();
    }//GEN-LAST:event_jButton_ClearActionPerformed

    // check ward_id và specific_address , nếu trùng thì không cần thêm.
    private int getAddress_idBySpecific_address(int ward_id, String specific_address) {
        int id = -1;
        Connection ketNoi = Connect.GetConnect();
        String sql = "select * from address WHERE specific_address ='" + specific_address + "' and ward_id = '" + ward_id + "'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                id = rs.getInt("address_id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(StaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }

    // nếu không trùng thì thêm specific_address
    private void insertNewAddress(int ward_id, String specific_address) {
        Connection ketNoi = Connect.GetConnect();
        String sql = "insert into address(ward_id,specific_address) values(?,?)";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setInt(1, ward_id);
            ps.setString(2, specific_address);
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(StaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jButton_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddActionPerformed
        clearAll();
        mode = Mode.ADD;
        UIController.showCardLayout("cardSecond", jPanel_Card);
        setEditableForAll(true);
        jTextField_ID.setEditable(true);

        Date date = new Date();
        jDateChooser_DateOfBirth.setDate(date);
        jComboBox_Province.setSelectedIndex(0);
        jComboBox_District.setSelectedIndex(0);
        jComboBox_Commune.setSelectedIndex(0);
    }//GEN-LAST:event_jButton_AddActionPerformed

    //ok
    public boolean insertAccount(Staff s) {
        Connection ketNoi = Connect.GetConnect();
        String sql = "INSERT INTO account (username, password , Full_Name, gender,date_of_birth,registered_date,address_id,phone_number,email,role_id,status)\n"
                + "VALUES (?,?, ?, ?,?,?,?,?,?,?,?)";
        PreparedStatement ps;
        try {
            ps = ketNoi.prepareStatement(sql);
            ps.setString(1, s.getUsername());
            ps.setString(2, s.getPassword());
            ps.setString(3, s.getFullName());
            ps.setString(4, s.getGender());
            ps.setString(5, s.getDateOfBirth());
            ps.setString(6, s.getRegisteredDate());
            ps.setInt(7, s.getAddress_id());
            ps.setString(8, s.getPhoneNumber());
            ps.setString(9, s.getEmail());
            ps.setInt(10, s.getRoleId());
            ps.setInt(11, s.getStatus());
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            Logger.getLogger(ReaderPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    //
    int getIdWard(String nameWard, String nameDistrict, String nameProvince) {
        int i = 0;
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select ward.ward_id from ward where ward.ward_name = ? and ward.district_id = ?");
            ps.setString(1, nameWard);
            ps.setInt(2, getIdDistrict(nameDistrict, nameProvince));
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                i = rs.getInt(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy IdWard");
        }
        return i;
    }

    public String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }

    private void jButton_ModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ModifyActionPerformed
        // TODO add your handling code here:
        mode = Mode.MODIFY;
        jTextField_ID.setEditable(false);
        UIController.showCardLayout("cardSecond", jPanel_Card);
        setEditableForAll(true);
    }//GEN-LAST:event_jButton_ModifyActionPerformed

    public boolean updateAccount(Staff staff) {
        Connection ketNoi = Connect.GetConnect();
        String sql = "update account\n"
                + "set Full_Name= ?, gender= ?, date_of_birth = ?,address_id = ?, phone_number= ?, email= ? , role_id = ?\n"
                + "WHERE username = ?";
        PreparedStatement ps;
        try {
            ps = ketNoi.prepareStatement(sql);
            ps.setString(1, staff.getFullName());
            ps.setString(2, staff.getGender());
            ps.setString(3, staff.getDateOfBirth());
            ps.setInt(4, staff.getAddress_id());
            ps.setString(5, staff.getPhoneNumber());
            ps.setString(6, staff.getEmail());
            ps.setInt(7, staff.getRoleId());
            ps.setString(8, staff.getUsername());
            return ps.executeUpdate() > 0;
        } catch (SQLException ex) {
            Logger.getLogger(ReaderPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    private void jButton_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveActionPerformed
        // TODO add your handling code here:
        jButton_Modify.setEnabled(false);
        jButton_Remove.setEnabled(false);
        String maNV = jTextField_ID.getText();
        if (maNV.equals("")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên bạn muốn xóa");
        } else {
            int luaChon = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa?", "Xác nhận", 0);
            if (luaChon == JOptionPane.CANCEL_OPTION) {
                return;
            } else if (luaChon == JOptionPane.OK_OPTION) {
                xoaNhanVien(maNV);
                JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công!");
                clearAll();
                getStaff();
            }
        }
    }//GEN-LAST:event_jButton_RemoveActionPerformed

    // status 0 => 1
    public void xoaNhanVien(String maNV) {
        String sql = "update account set status = 0 where username =  ? ";
        Connection con = Connect.GetConnect();
        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, maNV);
            ps.executeUpdate();
            ps.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(StaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jComboBox_ProvinceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ProvinceActionPerformed
        // TODO add your handling code here:
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select district.district_name from district where district.province_id = ?");
            ps.setInt(1, getIdProvince(jComboBox_Province.getSelectedItem().toString()));
            ResultSet rs = ps.executeQuery();
            jComboBox_District.removeAllItems();
            while (rs.next()) {
                jComboBox_District.addItem(rs.getString(1));
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy Province!!");
        }
    }//GEN-LAST:event_jComboBox_ProvinceActionPerformed

    int getIdProvince(String nameProvince) {
        int i = 0;
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select province.province_id from province where province.province_name = ?");
            ps.setString(1, nameProvince);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                i = rs.getInt(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy IdProvince!!");
        }
        return i;
    }

    int getIdRole(String role) {
        int i = 0;
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select role.role_id from role where role.role = ?");
            ps.setString(1, role);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                i = rs.getInt(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy role_id");
        }
        return i;
    }

    private void jComboBox_DistrictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_DistrictActionPerformed
        // TODO add your handling code here:
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select ward.ward_name from ward where ward.district_id = ?");
            ps.setInt(1, getIdDistrict(jComboBox_District.getSelectedItem().toString(), jComboBox_Province.getSelectedItem().toString()));
            ResultSet rs = ps.executeQuery();
            jComboBox_Commune.removeAllItems();
            while (rs.next()) {
                jComboBox_Commune.addItem(rs.getString(1));
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_jComboBox_DistrictActionPerformed

    int getIdDistrict(String nameDistrict, String nameProvince) {
        int i = 0;
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select district.district_id from district where district.district_name = ? and district.province_id = ?");
            ps.setString(1, nameDistrict);
            ps.setInt(2, getIdProvince(nameProvince));
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                i = rs.getInt(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy district_id!!");
        }
        return i;
    }

    private void jTable_StaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_StaffMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable_Staff.getModel();
        int selectedRow = jTable_Staff.getSelectedRow();

        List<Integer> list = getIdDistrictAndIdProvince(model.getValueAt(selectedRow, 0).toString());
        jTextField_ID.setText(model.getValueAt(selectedRow, 0).toString());
        jTextField_Name.setText(model.getValueAt(selectedRow, 1).toString());
        jTextField_Email.setText(model.getValueAt(selectedRow, 7).toString());
        jTextField_PhoneNumber.setText(model.getValueAt(selectedRow, 6).toString());
        jTextField_Address.setText(model.getValueAt(selectedRow, 5).toString().split(" - ")[0]);
        jComboBox_Province.setSelectedIndex(list.get(2) - 1);
        jComboBox_District.setSelectedItem(model.getValueAt(selectedRow, 5).toString().split(" - ")[2]);
        jComboBox_Commune.setSelectedItem(model.getValueAt(selectedRow, 5).toString().split(" - ")[1]);
        jComboBox_Role.setSelectedItem(model.getValueAt(selectedRow, 2).toString());
        if (model.getValueAt(selectedRow, 3).toString().equalsIgnoreCase("Nam")) {
            jRadioButton_Male.setSelected(true);
        } else if (model.getValueAt(selectedRow, 3).toString().equalsIgnoreCase("Nữ")) {
            jRadioButton_Female.setSelected(true);
        } else {
            jRadioButton_Other.setSelected(true);
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            jDateChooser_DateOfBirth.setDate(sdf.parse(model.getValueAt(selectedRow, 4).toString()));
        } catch (ParseException ex) {
            System.out.println(ex.getMessage());
        }
        jButton_Modify.setEnabled(true);
        jButton_Remove.setEnabled(true);
    }//GEN-LAST:event_jTable_StaffMouseClicked

    private void jComboBox_RoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_RoleActionPerformed
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select role from role");
            ps.setInt(1, getIdRole(jComboBox_Role.getSelectedItem().toString()));
            ResultSet rs = ps.executeQuery();
            jComboBox_Role.removeAllItems();
            while (rs.next()) {
                jComboBox_Role.addItem(rs.getString(1));
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy role!!");
        }
    }//GEN-LAST:event_jComboBox_RoleActionPerformed

    private void jButton_ClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ClearSearchActionPerformed
        // TODO add your handling code here:
        jTextField_NameSearch.setText("");
    }//GEN-LAST:event_jButton_ClearSearchActionPerformed

    private void jTextField_NameSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField_NameSearchCaretUpdate
        // TODO add your handling code here:
        String tuKhoa = jTextField_NameSearch.getText().toLowerCase();
        TableRowSorter<TableModel> trs = new TableRowSorter<>(jTable_Staff.getModel());
        jTable_Staff.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter("(?i)" + tuKhoa, 1));
    }//GEN-LAST:event_jTextField_NameSearchCaretUpdate

    private void jButton_ExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ExportExcelActionPerformed
        // TODO add your handling code here:
        File.xuatFileExcel("DSNhanVien", (DefaultTableModel) jTable_Staff.getModel(), "NhanVien");
        JOptionPane.showMessageDialog(this, "Xuất file excel thành công!");
    }//GEN-LAST:event_jButton_ExportExcelActionPerformed

    private void jButton_ImportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ImportExcelActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter excelFilter = new FileNameExtensionFilter("excel", "xls", "xlsx", "xlsm");
        fileChooser.setFileFilter(excelFilter);
        fileChooser.setMultiSelectionEnabled(false);
        int x = fileChooser.showDialog(this, "Chọn file");
        if (x == JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileChooser.getSelectedFile();
            File.nhapFileExcel(file.getAbsolutePath(), (DefaultTableModel) jTable_Staff.getModel());
        } else {
            return;
        }
    }//GEN-LAST:event_jButton_ImportExcelActionPerformed

    List<Integer> getIdDistrictAndIdProvince(String username) {
        int i = 0;
        int j = 0;
        int x = 0;
        List<Integer> list = new ArrayList<Integer>();
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select ward.ward_id,district.district_id,province.province_id from ward,district,province,address\n"
                    + "where ward.district_id = district.district_id\n"
                    + "and district.province_id = province.province_id\n"
                    + "and ward.ward_id = address.ward_id\n"
                    + "and address.address_id = ?");
            ps.setInt(1, getIdAddressByUserName(username));
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                i = rs.getInt(1);
                j = rs.getInt(2);
                x = rs.getInt(3);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy getIdDistrictAndIdProvince");
        }
        list.add(i);
        list.add(j);
        list.add(x);
        return list;
    }

    int getIdAddressByUserName(String username) {
        int i = 0;
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select account.address_id from account where account.username = ?");
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                i = rs.getInt(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy address_id từ username!!");
        }
        return i;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton_Add;
    private javax.swing.JButton jButton_Cancel;
    private javax.swing.JButton jButton_Clear;
    private javax.swing.JButton jButton_ClearSearch;
    private javax.swing.JButton jButton_ExportExcel;
    private javax.swing.JButton jButton_ImportExcel;
    private javax.swing.JButton jButton_Modify;
    private javax.swing.JButton jButton_OK;
    private javax.swing.JButton jButton_Remove;
    private javax.swing.JComboBox<String> jComboBox_Commune;
    private javax.swing.JComboBox<String> jComboBox_District;
    private javax.swing.JComboBox<String> jComboBox_Province;
    private javax.swing.JComboBox<String> jComboBox_Role;
    private com.toedter.calendar.JDateChooser jDateChooser_DateOfBirth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_Card;
    private javax.swing.JPanel jPanel_Card1;
    private javax.swing.JPanel jPanel_Card2;
    private javax.swing.JRadioButton jRadioButton_Female;
    private javax.swing.JRadioButton jRadioButton_Male;
    private javax.swing.JRadioButton jRadioButton_Other;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Staff;
    private javax.swing.JTextField jTextField_Address;
    private javax.swing.JTextField jTextField_Email;
    private javax.swing.JTextField jTextField_ID;
    private javax.swing.JTextField jTextField_Name;
    private javax.swing.JTextField jTextField_NameSearch;
    private javax.swing.JTextField jTextField_PhoneNumber;
    // End of variables declaration//GEN-END:variables
}
